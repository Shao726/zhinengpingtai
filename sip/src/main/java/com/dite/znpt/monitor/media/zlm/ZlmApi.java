package com.dite.znpt.monitor.media.zlm;import com.dite.znpt.monitor.media.zlm.dto.ServerConfig;import com.dite.znpt.monitor.media.zlm.dto.ServerInfo;import com.dite.znpt.monitor.media.zlm.dto.req.*;import com.dite.znpt.monitor.media.zlm.dto.resp.*;import java.io.IOException;import java.util.List;/** * @Author: huise23 * @Date: 2022/8/29 10:14 * @Description: Zlm客户端启动类 */public interface ZlmApi {    /**     * 获取API列表     * api: /index/api/getApiList     *     * @return Api列表     */    List<String> getApiList(ServerInfo server);    /**     * 获取各epoll(或select)线程负载以及延时     * api: /index/api/getThreadsLoad     *     * @return 各epoll(或select)线程负载以及延时     */    List<ThreadsLoadResp> getThreadsLoad(ServerInfo server);    /**     * 获取各后台epoll(或select)线程负载以及延时     * api: /index/api/getWorkThreadsLoad     *     * @return 各后台epoll(或select)线程负载以及延时     */    List<ThreadsLoadResp> getWorkThreadsLoad(ServerInfo server);    /**     * 获取服务器配置     * api: /index/api/getServerConfig     *     * @return 服务器配置     */    List<ServerConfig> getServerConfig(ServerInfo server);    /**     * 设置服务器配置     * api: /index/api/setServerConfig     *     * @param config 服务器配置     * @return 操作结果     */    Integer setServerConfig(ServerInfo server, ServerConfig config);    /**     * 重启服务器,只有Daemon方式才能重启，否则是直接关闭！     * api: /index/api/restartServer     *     * @return 操作结果     */    Boolean restartServer(ServerInfo server);    /**     * 获取流列表，可选筛选参数     * api: /index/api/getMediaList     *     * @param req 请求参数     * @return 操作结果     */    List<MediaResp> getMediaList(ServerInfo server, StreamReq req);    /**     * 关闭流(目前所有类型的流都支持关闭)     * api: /index/api/close_streams     *     * @param req 请求参数     * @return 操作结果     */    CloseStreamResp closeStreams(ServerInfo server, CloseStreamReq req);    /**     * 获取所有TcpSession列表(获取所有tcp客户端相关信息)     * api: /index/api/getAllSession     *     * @param req 请求参数     * @return 所有TcpSession列表     */    List<SessionResp> getAllSession(ServerInfo server, GetAllSessionReq req);    /**     * 断开tcp连接，比如说可以断开rtsp、rtmp播放器等     * api: /index/api/kick_session     *     * @param id 客户端唯一id，可以通过getAllSession接口获取     * @return 操作结果     */    Boolean kickSession(ServerInfo server, Long id);    /**     * 断开tcp连接，比如说可以断开rtsp、rtmp播放器等     * api: /index/api/kick_sessions     *     * @param req 请求参数     * @return 操作结果     */    Integer kickSession(ServerInfo server, GetAllSessionReq req);    /**     * 动态添加rtsp/rtmp/hls拉流代理(只支持H264/H265/aac/G711负载)     * api: /index/api/addStreamProxy     *     * @param req 请求参数     * @return 唯一Key     */    String addStreamProxy(ServerInfo server, StreamProxyReq req);    /**     * 关闭拉流代理     * api: /index/api/delStreamProxy     *     * @param key addStreamProxy接口返回的key     * @return 操作结果     */    Boolean delStreamProxy(ServerInfo server, String key);    /**     * 通过fork FFmpeg进程的方式拉流代理，支持任意协议     * api: /index/api/addFFmpegSource     *     * @param req 请求参数     * @return 唯一Key     */    String addFfMpegSource(ServerInfo server, FFmpegSourceReq req);    /**     * 关闭ffmpeg拉流代理     * api: /index/api/delFFmpegSource     *     * @param key addFFmpegSource接口返回的key     * @return 操作结果     */    Boolean delFfMpegSource(ServerInfo server, String key);    /**     * 获取rtp代理时的某路ssrc rtp信息     * api: /index/api/getRtpInfo     *     * @param streamId RTP的ssrc，16进制字符串或者是流的id(openRtpServer接口指定)     * @return 操作结果     */    RtpInfoResp getRtpInfo(ServerInfo server, String streamId);    /**     * 搜索文件系统，获取流对应的录像文件列表或日期文件夹列表     * api: /index/api/getMp4RecordFile     *     * @param req 请求参数     * @return 操作结果     */    Mp4RecordFileResp getMp4RecordFile(ServerInfo server, GetMp4RecordFileReq req);    /**     * 开始录制hls或MP4     * api: /index/api/startRecord     *     * @param req 请求参数     * @return 操作结果     */    Boolean startRecord(ServerInfo server, RecordReq req);    /**     * 停止录制流     * api: /index/api/stopRecord     *     * @param req 请求参数     * @return 操作结果     */    Boolean stopRecord(ServerInfo server, RecordReq req);    /**     * 获取流录制状态     * api: /index/api/isRecording     *     * @param req 请求参数     * @return 操作结果     */    Boolean isRecording(ServerInfo server, RecordReq req);    /**     * 获取截图或生成实时截图并返回     * api: /index/api/getSnap     *     * @param req 请求参数     * @return jpeg格式的图片，可以在浏览器直接打开     */    void getSnap(ServerInfo server, SnapReq req) throws IOException;    /**     * 创建GB28181 RTP接收端口，如果该端口接收数据超时，则会自动被回收(不用调用closeRtpServer接口)     * api: /index/api/openRtpServer     *     * @param req 请求参数     * @return 接收端口，方便获取随机端口号     */    Integer openRtpServer(ServerInfo server, RtpServerReq req);    /**     * 关闭GB28181 RTP接收端口     * api: /index/api/closeRtpServer     *     * @param streamId 该端口绑定的流ID，该端口只能创建这一个流(而不是根据ssrc创建多个)     * @return 是否找到记录并关闭     */    Boolean closeRtpServer(ServerInfo server, String streamId);    /**     * 获取openRtpServer接口创建的所有RTP服务器     * api: /index/api/listRtpServer     *     * @return 是否找到记录并关闭     */    List<RtpServerResp> listRtpServer(ServerInfo server);    /**     * 作为GB28181客户端，启动ps-rtp推流，支持rtp/udp方式；     * 该接口支持rtsp/rtmp等协议转ps-rtp推流。第一次推流失败会直接返回错误，成功一次后，后续失败也将无限重试。     * api: /index/api/startSendRtp     *     * @param req 请求参数     * @return 使用的本地端口号     */    Integer startSendRtp(ServerInfo server, SendRtpReq req);    /**     * 作为GB28181 Passive TCP服务器；     * 该接口支持rtsp/rtmp等协议转ps-rtp被动推流。     * 调用该接口，zlm会启动tcp服务器等待连接请求，     * 连接建立后，zlm会关闭tcp服务器，然后源源不断的往客户端推流。     * 第一次推流失败会直接返回错误，成功一次后，后续失败也将无限重试(不停地建立tcp监听，超时后再关闭)。     * api: /index/api/startSendRtpPassive     *     * @param req 请求参数     * @return 使用的本地端口号     */    Integer startSendRtpPassive(ServerInfo server, SendRtpReq req);    /**     * 停止GB28181 ps-rtp推流     * api: /index/api/stopSendRtp     *     * @param req 请求参数     * @return 操作结果     */    Boolean stopSendRtp(ServerInfo server, SendRtpReq req);    /**     * 获取主要对象个数统计，主要用于分析内存性能     * api: /index/api/getStatistic     *     * @return 操作结果     */    StatisticResp getStatistic(ServerInfo server);    /**     * 添加rtsp/rtmp主动推流(把本服务器的直播流推送到其他服务器去)     * api: /index/api/addStreamPusherProxy     *     * @param req 请求参数     * @return 流的唯一标识     */    String addStreamPusherProxy(ServerInfo server, StreamPusherProxyReq req);    /**     * 关闭推流     * api: /index/api/delStreamPusherProxy     *     * @param key 流的唯一标识     * @return 操作结果     */    Boolean delStreamPusherProxy(ServerInfo server, String key);}