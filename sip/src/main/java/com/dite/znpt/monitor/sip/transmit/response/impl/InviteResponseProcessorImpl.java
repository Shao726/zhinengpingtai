package com.dite.znpt.monitor.sip.transmit.response.impl;import com.dite.znpt.monitor.sip.config.SipConfig;import com.dite.znpt.monitor.sip.transmit.SipProcessorFactoryImpl;import com.dite.znpt.monitor.sip.transmit.response.ISipResponseProcessorAbstract;import gov.nist.javax.sip.ResponseEventExt;import gov.nist.javax.sip.stack.SIPDialog;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Component;import javax.annotation.Resource;import javax.sdp.SdpFactory;import javax.sdp.SdpParseException;import javax.sdp.SessionDescription;import javax.sip.InvalidArgumentException;import javax.sip.ResponseEvent;import javax.sip.SipException;import javax.sip.SipFactory;import javax.sip.address.Address;import javax.sip.address.SipURI;import javax.sip.header.CSeqHeader;import javax.sip.message.Request;import javax.sip.message.Response;import java.text.ParseException;/** * @Description:处理INVITE响应 * @author: swwheihei * @date: 2020年5月3日 下午4:43:52 */@Slf4j@Componentpublic class InviteResponseProcessorImpl extends ISipResponseProcessorAbstract {	private final String method = "INVITE";	@Resource	private SipConfig sipConfig;	@Resource	private SipFactory sipFactory;	@Resource	private SipProcessorFactoryImpl sipProcessorFactory;	@Override	public void afterPropertiesSet(){		sipProcessorFactory.addResponseProcessor(method, this);	}	/**	 * 处理invite响应	 * @param evt 响应消息	 */	@Override	public void process(ResponseEvent evt) {		try {			Response response = evt.getResponse();			int statusCode = response.getStatusCode();			// trying不会回复			if (statusCode == Response.TRYING) {			}			// 成功响应			// 下发ack			if (statusCode == Response.OK) {				ResponseEventExt event = (ResponseEventExt)evt;				SIPDialog dialog = (SIPDialog)evt.getDialog();				CSeqHeader cseq = (CSeqHeader) response.getHeader(CSeqHeader.NAME);				Request reqAck = dialog.createAck(cseq.getSeqNumber());				SipURI requestUri = (SipURI) reqAck.getRequestURI();				String contentString = new String(response.getRawContent());				// jainSip不支持y=字段， 移除以解析。				int ssrcIndex = contentString.indexOf("y=");				// 检查是否有y字段				SessionDescription sdp;				if (ssrcIndex >= 0) {					//ssrc规定长度为10字节，不取余下长度以避免后续还有“f=”字段					String substring = contentString.substring(0, contentString.indexOf("y="));					sdp = SdpFactory.getInstance().createSessionDescription(substring);				} else {					sdp = SdpFactory.getInstance().createSessionDescription(contentString);				}				requestUri.setUser(sdp.getOrigin().getUsername());				requestUri.setHost(event.getRemoteIpAddress());				requestUri.setPort(event.getRemotePort());				reqAck.setRequestURI(requestUri);				Address concatAddress = sipFactory.createAddressFactory().createAddress(sipFactory.createAddressFactory().createSipURI(sipConfig.getId(), sipConfig.getIp() + ":" + sipConfig.getPort()));				reqAck.addHeader(sipFactory.createHeaderFactory().createContactHeader(concatAddress));				log.info("[invite回复ack] {}-> {}:{} ",requestUri, event.getRemoteIpAddress(), event.getRemotePort());				dialog.sendAck(reqAck);			}		} catch (InvalidArgumentException | SipException e) {			e.printStackTrace();		} catch (ParseException e) {			throw new RuntimeException(e);		} catch (SdpParseException e) {			throw new RuntimeException(e);		}	}}